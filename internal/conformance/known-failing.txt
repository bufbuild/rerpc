# The current v1.0.0-rc3 of conformance suite wants to see "unknown"
# as the status for Connect unary responses where the JSON error body
# is missing the 'code' property. But we instead want clients to
# synthesize an error code from the HTTP status code. That way, if
# a proxy or middle-box happens to reply with a JSON error, but not
# a valid *Connect* error, we can use the HTTP status to derive an
# error code, just like we do when the response has an unexpected
# content type.
#
# So after we fix the tests in the conformance suite, we can remove
# these lines below.
Connect Error and End-Stream/**/error/missing-code
Connect Error and End-Stream/**/error/null
Connect Error and End-Stream/**/error/null-code

# The current v1.0.0-rc3 of conformance suite has expectations based
# on the old mappings of HTTP to RPC code. The mappings were revised
# in the spec (https://github.com/connectrpc/connectrpc.com/pull/130),
# and this repo implements those new mappings. So test cases based on
# the old mappings fail for right now.
Connect Unexpected Responses/**/unexpected-error-body
HTTP to Connect Code Mapping/**/bad-request
HTTP to Connect Code Mapping/**/conflict
HTTP to Connect Code Mapping/**/payload-too-large
HTTP to Connect Code Mapping/**/precondition-failed
HTTP to Connect Code Mapping/**/request-header-fields-too-large
HTTP to Connect Code Mapping/**/request-timeout

# The current v1.0.0-rc3 of conformance suite has expectations for these
# conditions that were based on the behavior of grpc-go (which returns an
# "unknown" error), with the incorrect idea that was authoritative (and,
# honestly, that code makes sense). However, the actual correct behavior,
# per the specification for gRPC error codes, is for these cardinality
# violations to instead return "unimplemented":
#    https://grpc.github.io/grpc/core/md_doc_statuscodes.html
# This library returns the correct code, which (for now) is interpreted
# as a failure by the conformance suite.
**/unary-ok-but-no-response
**/unary-multiple-responses